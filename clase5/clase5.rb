#***CLASE 5 (Methods and file manipulation)***#

def sum(num1, num2)
  if num1 % 2 == 0
    return num1 - num2
  end
  num1 + num2
end

def say_hi name
  "hola #{name}"
end

# Los parametros pueden tenes un valor por defecto en este caso el default de inicial es 0 y esto se utiliza cuando no se introduce el parametrp
# todos los parametros opcionales van al final (los que tienen valor por defecto) y los obligatorios al principio
def sumatoria values, inicial
  suma = inicial
  values.each do |value|
    suma+= value
  end
  suma
end

# Ejercicio 1 (Realizar la funcion fetch manualmente)

def fetch (hash,key,default)
  if hash[key] == nil
    default
  else
    hash[key]
  end
end

# **Ejercicio 2 (Encontrar el promedio de un arreglo de numeros)

def avg (arreglo)
  suma = 0.0
  arreglo.each do |elemento|
    suma+=elemento
  end
    avg = suma/arreglo.length.to_f
  end
  .reduce #permite hacer lo del promedio en una linea de codigo
  .inject {|sum, value| sum + value} · esto es un acumulador coge el valor anterior y le suma el actual
  .fdiv #Division con resultado flotante

  #Ejercicio 3 (Hacer la funcion concat, concatena los dos areglos insertados)

  def concat (ar1, ar2)
    arreglo=[]
    ar1.each do |elemento|
      arreglo << elemento
    end
    ar2.each do |elemento|
      arreglo << elemento
    end
    arreglo
  end
  # cuando los metodos tienen ! es porque modifica el arreglo o la variable insertada

    # Manejar Archivos en Ruby

    File.directory '/Users/Andrea/David_Aguilar' #Pregunta si existe o no esa carpeta y retorna boolean
    File.file '/Users/Andrea/David_Aguilar/class5.rb' #Pregunta si existe o no ese archivo y retorna boolean
    File.expand_path '~' # El signo ~significa el home ( la carpeta del comienzo)
    File.expand_path '~/downloads'
    .extname #Envia la extencion del archivo que hay en cierto path
    .basename #devuelve el nombre del archivo sin la extencion
    .dirname # devuelve el directorio en el que está
    .exist? # pregunta si el directorio o el archivo existe y devuelve un boolean

    new_file = File.new('auto_generated.rb','w') # crear un nuevo archivo
    new_file.write "puts'hola mundo'"
    new_file.close #Hay que cerrarlo para poder que guarde los cambios y se vean en el archivo

    file.open('autogenerated.rb','w') do |file| #
      file.write "puts 'chao mundo'"
    end #Asì se reescribe el texto que habia y por esto hay que permitir el permiso de aappend asì
    file.('autogenerated.rb','a')
    new_file File.open ('autogenerated.rb','a')#Si es 'a' o 'w', crea el archivo, si es 'r', saca error

    new_file.each_line do |line| #Esto lee linea por linea del archivo
      puts "LINE = #{line}"
    end
new_file.read #Aqui sale un error porque ya se leyò todo el archivo con la funcion de arriba, sino leerìa todo el archivo, para volver al comienzo se utiliza lo siguiente:
new_file.rewind
new_file.rename # renombrar el archivo

#Ejercicio crear un archivo con contenido
new_file = File.new('manipulated_file.rb','w')
new_file.write "puts Lorem ipsum dolor sit amet, consectetur \nadipisicing elit, sed do eiusmod tempor incididunt ut labore et \ndolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation \nullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \npariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt\n mollit anim id est laborum."
new_file.close
#Ejercicio leer el archivo creado
new_file = File.open('manipulated_file.rb','rb+')
new_file.read

new_file.each_line.with_index do |line, index|
  puts "#{index} #{line}"
end
